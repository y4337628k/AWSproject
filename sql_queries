import configparser

# CONFIG
config = configparser.ConfigParser()
config.read('dwh.cfg')

# DROP TABLES

staging_events_table_drop = "DROP TABLE IF EXISTS staging_events_table"
staging_songs_table_drop = "DROP TABLE IF EXISTS staging_songs_table"
songplay_table_drop = "DROP TABLE IF EXISTS songplay_table"
user_table_drop = "DROP TABLE IF EXISTS user_table"
song_table_drop = "DROP TABLE IF EXISTS song_table"
artist_table_drop = "DROP TABLE IF EXISTS artist_table"
time_table_drop = "DROP TABLE IF EXISTS time_table"

# CREATE TABLES

staging_events_table_create= ("""
CREATE TABLE IF NOT EXISTS staging_events_table (
staging_event_id INT IDENTITY(0,1),
artist VARCHAR,
auth VARCHAR,
firstname VARCHAR,
gender VARCHAR,
itemsession INT,
lastname VARCHAR,
length FLOAT,
level VARCHAR,
location VARCHAR,
method VARCHAR,
page VARCHAR,
registration VARCHAR,
session_id INT,
song VARCHAR,
status INT,
ts TIMESTAMP,
user_agnet VARCHAR,
user_id INT sortkey);
""")

staging_songs_table_create = ("""
CREATE TABLE IF NOT EXISTS staging_songs_table (
num_songs INT,
artist_id VARCHAR,
artist_latitude FLOAT,
artist_longtitude FLOAT,
artist_location VARCHAR,
artist_name VARCHAR,
song_id VARCHAR,
title VARCHAR,
duration INT,
year INT);
""")

songplay_table_create = ("""
CREATE TABLE IF NOT EXISTS songplay_table (
songplay_id INT IDENTITY(0,1) sortkey distkey, 
start_time TIMESTAMP, 
user_id INT NOT NULL, 
level VARCHAR, 
song_id VARCHAR, 
artist_id VARCHAR, 
session_id INT NOT NULL, 
location VARCHAR, 
user_agent VARCHAR);
""")

user_table_create = ("""
CREATE TABLE IF NOT EXISTS user_table (
user_id INT NOT NULL sortkey,
first_name VARCHAR NOT NULL,
last_name VARCHAR NOT NULL,
gender VARCHAR NOT NULL,
level VARCHAR);
""")

song_table_create = ("""
CREATE TABLE IF NOT EXISTS song_table (
song_id INT NOT NULL sortkey,
title VARCHAR NOT NULL,
artist_id VARCHAR NOT NULL,
year INT NOT NULL,
duration FLOAT NOT NULL);
""")

artist_table_create = ("""
CREATE TABLE IF NOT EXISTS artists_table (
artist_id VARCHAR NOT NULL sortkey, 
name VARCHAR NOT NULL, 
location VARCHAR,
lattitude FLOAT,
longitude FLOAT);
""")

time_table_create = ("""
CREATE TABLE IF NOT EXISTS time_table (
start_time TIMESTAMP sortkey, 
hour INT, 
day INT, 
week INT, 
month INT, 
year INT, 
weekday INT);
""")

# STAGING TABLES

staging_events_copy = ("""
copy staging_events_table from {} 
credentials 'aws_iam_role={}'
json {}
COMPUPDATE OFF region 'us-west-2'
TIMEFORMAT as 'epochmillisecs';
""").format(config.get('S3', 'LOG_DATA'), config.get('IAM_ROLE', 'ARN'), config.get('S3', 'LOG_JSONPATH'))

staging_songs_copy = ("""
copy staging_songs_table from {} 
credentials 'aws_iam_role={}'
json 'auto'
COMPUPDATE OFF region 'us-west-2';
""").format(config.get('S3', 'SONG_DATA'), config.get('IAM_ROLE', 'ARN'))

# FINAL TABLES

songplay_table_insert = ("""
INSERT INTO songplay_table (start_time, user_id, level, song_id, artist_id, session_id, location, user_agent) 
SELECT TIMESTAMP 'epoch' + se.ts/1000 * interval '1 second' as start_time, se.user_id, se.level, ss.song_id, ss.artist_id, se.session_id, se.location, se.user_agent
FROM staging_events_table se JOIN staging_songs_table ss
ON se.song = ss.title AND se.artist = ss.artist_name
WHERE se.page = 'NextSong';
""")

user_table_insert = ("""
INSERT INTO user_table (user_id, first_name, last_name, gender, level)
SELECT DISTINCT user_id, firstname, lastname, gender, level
FROM staging_events_table
WHERE page = 'NextSong';
""")

song_table_insert = ("""
INSERT INTO song_table (song_id, title, artist_id, year, duration)
select distinct song_id, title, artist_id, year, duration
FROM staging_songs_table
WHERE song_id IS NOT NULL;
""")

artist_table_insert = ("""
INSERT INTO artists_table (artist_id, name, location, lattitude, longitude)
SELECT DISTINCT artist_id, artist_name as name, location, lattitude, longitude
FROM taging_songs_table
WHERE artist_id IS NOT NULL;
""")

time_table_insert = ("""
INSERT INTO time_table (start_time, hour, day, week, month, year, weekday)
SELECT start_time, extract (hour from start_time), extract (day from start_time), extract (week from start_time), extract (month from start_time), extract (year from start_time), extract (weekday from start_time)
FROM songplay_table;
""")

# QUERY LISTS

create_table_queries = [staging_events_table_create, staging_songs_table_create, songplay_table_create, user_table_create, song_table_create, artist_table_create, time_table_create]
drop_table_queries = [staging_events_table_drop, staging_songs_table_drop, songplay_table_drop, user_table_drop, song_table_drop, artist_table_drop, time_table_drop]
copy_table_queries = [staging_events_copy, staging_songs_copy]
insert_table_queries = [songplay_table_insert, user_table_insert, song_table_insert, artist_table_insert, time_table_insert]
